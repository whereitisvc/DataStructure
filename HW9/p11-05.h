/* =================== graphDltArc ================== 	Deletes an existing arc. 	   Pre    graph is pointer to graph head structure	          fromKey is key of start vertex; toKey is	          toKey is key of dest'n of delete vertex	   Post   Arc deleted 	   Return Success +1 if successful	                  -2 if fromKey not found	                  -3 if toKey not found*/int graphDltArc (GRAPH* graph,                  void* fromKey, void* toKey){//	Local Definitions 	VERTEX* fromVertexPtr;	VERTEX* toVertexPtr;	ARC*    preArcPtr;	ARC*    arcWalkPtr;//	Statements 	if (!graph->first)	    return -2;	// Locate source vertex 	fromVertexPtr = graph->first;	while (fromVertexPtr && (graph->compare(fromKey,	                         fromVertexPtr->dataPtr) > 0))	    fromVertexPtr = fromVertexPtr->pNextVertex;	if (!fromVertexPtr || graph->compare(fromKey,	                          fromVertexPtr->dataPtr) != 0)	   return -2;	   	// Locate destination vertex in adjacency list 	if (!fromVertexPtr->pArc)	    return -3;		preArcPtr = NULL;	arcWalkPtr = fromVertexPtr->pArc;	while (arcWalkPtr && (graph->compare(toKey,	               arcWalkPtr->destination->dataPtr) > 0))	   {	    preArcPtr  = arcWalkPtr;	    arcWalkPtr = arcWalkPtr->pNextArc;	   } // while arcWalkPtr && 	if (!arcWalkPtr || (graph->compare(toKey,	               arcWalkPtr->destination->dataPtr) != 0))	    return -3;	toVertexPtr = arcWalkPtr->destination;		// from, toVertex & arcPtr located. Delete arc 	--fromVertexPtr->outDegree;     	--toVertexPtr -> inDegree;	if (!preArcPtr)	    // Deleting first arc 	    fromVertexPtr->pArc  = arcWalkPtr->pNextArc;	else	    preArcPtr->pNextArc = arcWalkPtr->pNextArc;	free (arcWalkPtr);	return 1;}  // graphDltArc 