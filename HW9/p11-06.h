/*	================== graphDpthFrst =================	Process data in graph in depth-first order.	   Pre  graph is the a pointer to graph head	   Post vertices "processed".	   Processed Flag: 0 = not processed	                   1 = pushed into stack	                   2 = processed*/void graphDpthFrst (GRAPH* graph,                     void (*process) (void* dataPtr)){ // Local Definitions 	bool    success;	VERTEX* walkPtr;	VERTEX* vertexPtr;	VERTEX* vertToPtr;	STACK * stack;	ARC*    arcWalkPtr;	// Statements 	if (!graph->first)	    return;	// Set processed flags to not processed 	walkPtr = graph->first;	while (walkPtr)	   {	    walkPtr->processed = 0;	    walkPtr            = walkPtr->pNextVertex;	   } // while 		// Process each vertex in list 	stack = createStack ();	walkPtr = graph->first;	while (walkPtr)	  {	   if (walkPtr->processed < 2)	     {	      if (walkPtr->processed < 1)	        {	         // Push & set flag to pushed 	         success = pushStack (stack, walkPtr);	         if (!success)	             printf("\aStack overflow 100\a\n"),	                   exit (100); 	            	         walkPtr->processed = 1;	        } // if processed < 1 	     } // if processed < 2 	   // Process descendents of vertex at stack top 	   while (!emptyStack (stack))	     {	      vertexPtr = popStack(stack);	      process (vertexPtr->dataPtr);	      vertexPtr->processed = 2;	        	      // Push all vertices from adjacency list 	      arcWalkPtr = vertexPtr->pArc;	      while (arcWalkPtr)	        {	         vertToPtr = arcWalkPtr->destination;	         if (vertToPtr->processed == 0)	           {	            success = pushStack(stack, vertToPtr);	            if (!success)	              printf("\aStack overflow 101\a\n"),	                  exit (101);	            vertToPtr->processed = 1;	           } // if vertToPtr 	         arcWalkPtr = arcWalkPtr->pNextArc;	        } // while pWalkArc 	           	     } // while !emptyStack 	   walkPtr = walkPtr->pNextVertex;	  } // while walkPtr	destroyStack(stack); 	return;} // graphDpthFrst