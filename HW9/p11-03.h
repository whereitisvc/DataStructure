/* ================== graphDltVrtx ================= 	Deletes existing vertex only if its degree is zero.	   Pre    graph is pointer to graph head structure	          dltKey is key of vertex to be deleted	   Post   Vertex deleted if degree zero	          -or- An error code is returned 	   Return Success +1 if successful	                  -1 if degree not zero	                  -2 if dltKey not found*/ int graphDltVrtx (GRAPH* graph, void* dltKey){//	Local Definitions 	VERTEX* predPtr;	VERTEX* walkPtr;//	Statements 	if (!graph->first)	    return -2;	// Locate vertex to be deleted 	predPtr = NULL;	walkPtr = graph->first;	while (walkPtr	       && (graph->compare(dltKey, walkPtr->dataPtr) > 0))	   {	    predPtr = walkPtr;	    walkPtr = walkPtr->pNextVertex;	   } // walkPtr && 	if (!walkPtr 	  || graph->compare(dltKey, walkPtr->dataPtr) != 0)	   return -2;	   	// Found vertex. Test degree 	if ((walkPtr->inDegree > 0) || (walkPtr->outDegree > 0))	    return -1;		// OK to delete 	if (!predPtr)	    graph->first         = walkPtr->pNextVertex;	else	    predPtr->pNextVertex = walkPtr->pNextVertex;	--graph->count;	free(walkPtr);	return 1;}  // graphDltVrtx 